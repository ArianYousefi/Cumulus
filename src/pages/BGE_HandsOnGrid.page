<apex:page controller="BGE_HandsOnGridController" showHeader="false" sidebar="false" docType="html-5.0">

    <html ng-app="myApp" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" lang="en">

        <!-- AngularJs 1.6.4 -->
        <apex:includeScript value="{!URLFOR($Resource.BGEResources, '/js/angular.min.js')}"/>

        <!-- Hands on table 0.24.3 -->
        <apex:includeScript value="{!URLFOR($Resource.BGEResources, '/js/handsontable.full.min.js')}"/>
        <apex:stylesheet value="{!URLFOR($Resource.BGEResources, '/css/handsontable.full.min.css')}"/>

        <!-- Hands on table for Angular 0.13 -->
        <apex:includeScript value="{!URLFOR($Resource.BGEResources, '/js/ngHandsontable.min.js')}"/>

        <!-- jQuery JavaScript 3.2.1 -->
        <apex:includeScript value="{!URLFOR($Resource.BGEResources, '/js/jquery.min.js')}"/>

        <!-- Notify.js 0.4.2 -->
        <apex:includeScript value="{!URLFOR($Resource.BGEResources, '/js/notify.min.js')}"/>

        <!-- Custom CSS -->
        <apex:stylesheet value="{!URLFOR($Resource.BGEResources, '/css/BGEStyle.css')}"/>

        <style>
            .slds-scope button {

                overflow: hidden;
            }

            .slds-scope td, .slds-scope th {

                padding: 4px;
            }

            .handsontable thead th .relative {

                padding: 4px 4px;
            }
        </style>

        <!-- Custom Javascript -->
        <apex:includeScript value="{!URLFOR($Resource.BGEResources, '/js/BGEUtils.js')}"/>

        <script>

            var myApp;

            myApp = angular.module('myApp', ['ngHandsontable'])
            myApp.controller('MainCtrl', function($scope, $compile) {

                var data = JSON.parse('{!jsonString}');
                var activeData = JSON.parse('{!jsonString}');
                var columnsData = JSON.parse('{!jsonColumnsString}');

                table = document.getElementById('my-hot-table');
                searchField = document.getElementById('handsonSearch');

                var changesToSave = {};
                var lastSelectedRow = null;
                var arrayForChanged = [];

                // Flag to prevent a bug when deleting multiple records.
                var deletingRecords = false;

                // Flag for updating using sticky fields
                stickyEdit = false;

                // Needed for afterCreateRow:as it fires before afterInit: & confuses all
                var renderState = false;

                document.getElementById("totalOfRecords").value = data.length;

                var total = 0;

                for (var i=0; i < data.length; i++) {

                    if (!isNaN(data[i].Donation_Amount__c)) {

                        total = total + data[i].Donation_Amount__c;
                    }
                }

                document.getElementById("totalAmount").value = total;

                var dynamicColumns = [];
                var schema = [];

                for (var i=0; i < columnsData.length; i++) {

                    var col = new Object();
                    var templateField = columnsData[i];

                    col.data = templateField.apiName;
                    col.title = templateField.name.toUpperCase();
                    col.type = templateField.type;

                    // Enable type checking. If for example the user places text in a numeric column, mark the cell as red
                    col.allowInvalid = true;

                    // Center the content of the columns
                    col.className = "htCenter htMiddle";

                    // Do not wrap the content of the column
                    col.wordWrap = false;


                    if (templateField.type === "date") {

                        col.dateFormat = "YYYY-MM-DD";
                        col.correctFormat = true;
                        col.defaultDate = "today";
                    }

                    if (templateField.isDecimal === "true") {

                        col.format = '$0,0.00';
                    }

                    if (templateField.type === "email") {

                        col.type = 'text';
                    }

                    dynamicColumns.push(col);
                }

                // BEGINNING OF TABLE CONFIGURATION

                hot = new Handsontable(table, {

                    data: data,
                    outsideClickDeselects: false, //you must add this, otherwise getSelected() will return 'undefined'
                    columnSorting: true,
                    observeChanges: true,
                    persistantState: false,
                    contextMenu: true,
                    manualColumnResize: true,
                    readOnly: false,
                    search: true,
                    sortIndicator: true,
                    stretchH: 'all',
                    autoWrapRow: false,
                    currentRowClassName: 'currentRow',
                    minSpareRows: 1, // always keep at least 1 spare row at the bottom.
                    fillHandle: true,
                    columns: dynamicColumns,
                    dataSchema: schema,

                    beforeRemoveRow: function(index, amount){

                        if (!deletingRecords) {

                            var selection = hot.getSelected();

                            if(selection != undefined) {

                                var r = confirm("Delete record?");

                                if (r == true) {

                                    // Set the flag on true so the "before remove" event does not fire the individual remove function hence showing an exception error.
                                    deletingRecords = true;

                                    var start = selection[0];
                                    var end = selection[2];
                                    var gridData = hot.getData();
                                    var batchIds = [];

                                    for (var r=start;r<=end;r++){

                                        var row = gridData[r];
                                        var dataRowId = row[GetColumnFromName('Id')];
                                        batchIds.push(dataRowId);
                                    }

                                    Visualforce.remoting.Manager.invokeAction(
                                        '{!$RemoteAction.BGE_HandsOnGridController.deleteAll}',
                                        batchIds,
                                        function (result, event) {

                                            if (result == null) {

                                                $.notify("Records deleted",'success');
                                            }
                                            if (result != null && result.success) {

                                                $.notify(result.messages[0], 'success');
                                            }
                                            else if (result != null && result.messages != null) {

                                                for (var i = 0; i < result.messages.length; i++) {

                                                    $.notify(result.messages[i], 'error');
                                                }
                                            }

                                            $scope.$apply();
                                        }
                                    );

                                        hot.alter('remove_row');
                                        hot.deselectCell();

                                        // Set the flag back on false so we can continue deleting records individualy.
                                        deletingRecords = false;
                                    }
                                    else {

                                        return false;
                                    }
                                }
                                else{

                                    alert("please select cell first");
                                }
                            }
                        },


                        afterRemoveRow: function(index, amount){

                            document.getElementById("totalOfRecords").value = data.length - 1;

                            total = 0;

                            for (var i=0; i < data.length; i++) {

                                if (!isNaN(data[i].Donation_Amount__c)) {

                                    total = total + data[i].Donation_Amount__c;
                                }
                            }

                            document.getElementById("totalAmount").value = total;
                        },


                        afterChange: function (changes, source) {

                            // restore table after reload of a page
                            if (source === 'loadData') {

                                return;
                            }

                            if((source === 'paste'  || source === 'autofill') && deletingRecords === false) {

                                // Save all records
                                triggerSaveAll();
                            }
                            else if (stickyEdit === true && deletingRecords === false) {

                                stickyEdit = false;

                                // Save all records
                                triggerSaveAll();
                            }
                            else {

                                var row  = changes[0][0];
                                var prop = changes[0][1];
                                var oldValue = changes[0][2];
                                var newValue = changes[0][3];

                                var dataRowId = this.getDataAtRowProp(row, 'Id');

                                if (!changesToSave[dataRowId]) {

                                    changesToSave[dataRowId] = {};
                                }

                                $scope.currentDataImport = this.getDataAtRow(row);
                                changesToSave[dataRowId][prop] = newValue;
                            }

                            // After change always creates an empty row, so count one less.
                            document.getElementById("totalOfRecords").value = data.length-1;

                            total = 0;

                            for (var i=0; i < data.length; i++) {

                                if (!isNaN(data[i].Donation_Amount__c)) {

                                    total = total + data[i].Donation_Amount__c;
                                }
                            }

                            document.getElementById("totalAmount").value = total;
                        },

                        afterSelectionEnd: function(row, column, rowEnd, columnEnd) {

                            var dataRowId = this.getDataAtRowProp(lastSelectedRow, 'Id');

                            var self = this;

                            if (lastSelectedRow !== null && lastSelectedRow !== row) {

                                if (changesToSave[dataRowId]) {

                                    triggerSave(dataRowId, changesToSave[dataRowId], function(result) {

                                        if (dataRowId == null) {

                                            self.setDataAtCell(row-1, GetColumnFromName('Id'), result.dataImportIds[0]);
                                        }

                                        var cellsToUpdate = [];

                                        cellsToUpdate= [[row-1, GetColumnFromName('Name'), result.name],[row-1, GetColumnFromName('FailureInformation__c'), result.failureInformation],[row-1, GetColumnFromName('Account1ImportStatus__c'), result.account1ImportStatus],[row-1, GetColumnFromName('Account1Imported__c'), result.account1Imported],[row-1, GetColumnFromName('Account2ImportStatus__c'), result.account2ImportStatus], [row-1, GetColumnFromName('Account2Imported__c'), result.account2Imported],[row-1, GetColumnFromName('Campaign_Member_Status__c'), result.campaignMemberStatus], [row-1, GetColumnFromName('Contact1Imported__c'), result.contact1Imported], [row-1, GetColumnFromName('Contact1ImportStatus__c'), result.contact1ImportStatus], [row-1, GetColumnFromName('Contact2ImportStatus__c'), result.contact2ImportStatus], [row-1, GetColumnFromName('Contact2Imported__c'), result.contact2Imported], [row-1, GetColumnFromName('HomeAddressImportStatus__c'), result.homeAddressImportStatus], [row-1, GetColumnFromName('HomeAddressImported__c'), result.homeAddressImported], [row-1, GetColumnFromName('HouseholdAccountImported__c'), result.householdAccountImported], [row-1, GetColumnFromName('HouseholdAccountImported__c'), result.householdAccountImported], [row-1, GetColumnFromName('ImportedDate__c'), result.importedDate],[row-1, GetColumnFromName('DonationImportStatus__c'), result.donationImportStatus], [row-1, GetColumnFromName('DonationImported__c'), result.donationImported], [row-1, GetColumnFromName('PaymentImportStatus__c'), result.paymentImportStatus], [row-1, GetColumnFromName('PaymentImported__c'), result.paymentImported], [row-1, GetColumnFromName('Status__c'), result.status] ];

                                        self.setDataAtCell(cellsToUpdate);

                                        changesToSave = {};
                                    });

                                    changesToSave = {};
                                }
                            }

                            lastSelectedRow = row;
                        },

                        afterOnCellMouseDown: function(event, coords){
                            // 'coords.row < 0' because we only want to handle clicks on the header row
                            if (coords.row < 0){

                                hot.deselectCell();
                            }
                        },
                        afterInit: function () {

                            renderState = true;
                        },
                        afterCreateRow: function(index, amount) {

                            if(renderState == true) {

                                for (var i=0; i < columnsData.length; i++) {

                                    var column = columnsData[i];

                                //    if (column.stickyField == true) {

                                //        hot.data[index,i] = column.stickyFieldValue;
                                        // hot.setDataAtCell(index, i, column.stickyFieldValue);
                                //    }
                                }

                                hot.render();
                            }
                        }
                });

                // END OF TABLE CONFIGURATION


                // BEGIN DEFINING ANGULAR FUNCTIONS

                function GetColumnFromName(name){

                    var numberOfColumns = dynamicColumns.length;
                    var i =   0;

                    for (i = 0; i < numberOfColumns; i++) {

                        if (name.toLowerCase() === dynamicColumns[i].data.toLowerCase() ) {

                            return i;
                        }
                    }

                    return -1; // return -1 if nothing can be found
                }

                function triggerSave(id, data, callback) {

                    // Get Batch Id from URL
                    var pBatchId = getAllUrlParams().batchid;

                    if (data) {

                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.BGE_HandsOnGridController.save}',
                            id,
                            pBatchId,
                            JSON.stringify(data),

                            function (result, event) {

                                if (result == null) {

                                    $.notify("Record saved",'success');
                                }
                                if (result != null && result.success) {

                                    $.notify(result.messages[0], 'success');

                                    if (callback != null && callback != undefined) {

                                        callback(result);
                                    }
                                }
                                else if (result != null && result.messages != null) {

                                    for (var i = 0; i < result.messages.length; i++) {

                                        $.notify(result.messages[i], 'error');
                                    }
                                }

                                $scope.$apply();
                            }
                        );

                    }
                }

                function triggerSaveAll() {

                    var pBatchId = getAllUrlParams().batchid;

                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.BGE_HandsOnGridController.saveAll}',
                        pBatchId,
                        JSON.stringify(hot.getSourceData(0, 0, hot.countRows() - 1, hot.countCols() - 1)),
                        function (result, event) {

                            if (result == null) {

                                $.notify("Changes saved",'success');
                            }
                            if (result != null && result.success) {

                                $.notify(result.messages[0], 'success');

                                return;
                            }
                            else if (result != null && result.messages != null) {

                                for (var i = 0; i < result.messages.length; i++) {

                                    $.notify(result.messages[i], 'error');
                                }
                            }

                            $scope.$apply();
                        }
                    );
                }

                function triggerDryRunProcess() {

                    $('.dryrunbutton').on('click', function () {

                        var pBatchId = getAllUrlParams().batchid;

                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.BGE_HandsOnGridController.dryRunProcess}',
                            pBatchId,
                            function (result, event) {

                                if (result == null) {

                                    $.notify("Changes saved",'success');
                                }
                                if (result != null && result.success) {

                                    $.notify(result.messages[0], 'success');

                                    return;
                                }
                                else if (result != null && result.messages != null) {

                                    for (var i = 0; i < result.messages.length; i++) {

                                        $.notify(result.messages[i], 'error');
                                    }
                                }

                                $scope.$apply();
                            }
                        );
                    });
                }

                function triggerDeleteAll() {

                    $('.deletebutton').on('click', function () {

                        var selection = hot.getSelected();

                        if(selection != undefined) {

                            var r = confirm("Delete record?");

                            if (r == true) {

                                // Set the flag on true so the "before remove" event does not fire the individual remove function hence showing an exception error.
                                deletingRecords = true;

                                var start = selection[0];
                                var end = selection[2];
                                var gridData = hot.getData();
                                var batchIds = [];

                                for (var r=start;r<=end;r++){

                                    var row = gridData[r];
                                    var dataRowId = row[GetColumnFromName('Id')];

                                    batchIds.push(dataRowId);
                                }

                                Visualforce.remoting.Manager.invokeAction(
                                    '{!$RemoteAction.BGE_HandsOnGridController.deleteAll}',
                                    batchIds,
                                    function (result, event) {

                                        if (result == null) {

                                            $.notify("Records deleted",'success');
                                        }
                                        if (result != null && result.success) {

                                        //    $.notify(result.messages[0], 'success');
                                        }
                                        else if (result != null && result.messages != null) {

                                            for (var i = 0; i < result.messages.length; i++) {

                                                $.notify(result.messages[i], 'error');
                                            }
                                        }

                                        $scope.$apply();
                                    }
                                );

                                hot.alter('remove_row', start, end + 1);

                                hot.deselectCell();

                                // Set the flag back on false so we can continue deleting records individualy.
                                deletingRecords = false;
                            }
                            else {

                                return false;
                            }
                        }
                        else{

                            alert("please select cell first");
                        }
                    });
                }

                triggerDeleteAll();
                triggerDryRunProcess();

                Handsontable.Dom.addEvent(searchField, 'keyup', function (event) {

                    if(this.value === '') {

                        hot.updateSettings({data: data});
                    }
                    else {

                        var queryResult = hot.search.query(this.value);

                        activeData = [];

                        for (i = 0; i < queryResult.length; i++) {

                            var object = queryResult[i];

                            var row = data[object.row];

                            activeData.push(row);
                        }

                        hot.updateSettings({data: activeData});
                        hot.render();
                    }

                });

                // END DEFINING ANGULAR FUNCTIONS
            });


        </script>

        <apex:slds />

        <div class="slds-scope">
            <div id="notifications"></div>
            <div id="wrapper" class="slds-form slds-form_stacked" ng-controller="MainCtrl as ctrl">

                <!-- HEADER -->
                <div class="slds-page-header">
                    <div class="slds-grid slds-wrap slds-grid_pull-padded">
                        <div class="slds-p-horizontal_small slds-size_1-of-2 slds-medium-size_4-of-6 slds-large-size_3-of-12">
                            <input type="search" id="handsonSearch" placeholder="search" class="slds-input" style="width: 230px;align:right;" />
                        </div>

                        <div class="slds-p-horizontal_small slds-size_1-of-2 slds-medium-size_2-of-6 slds-large-size_2-of-12">
                            <button class="deletebutton slds-button slds-button_neutral" title="Delete Selected Rows">
                                <svg class="slds-button__icon slds-button__icon_left" aria-hidden="true">
                                    <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/apexpages/slds/latest/assets/icons/action-sprite/svg/symbols.svg#delete" />
                                </svg>
                                Delete
                            </button>
                            <!--    <button class="dryrunbutton slds-button slds-button_neutral" title="Dry Run Process">
                                        <svg class="slds-button__icon slds-button__icon_left" aria-hidden="true">
                                            <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/apexpages/slds/latest/assets/icons/action-sprite/svg/symbols.svg#change_record_type" />
                                        </svg>
                                        Dry Run
                                    </button> -->
                        </div>
                    </div>
                </div>
                <!-- / HEADER -->

                <!-- TABLE -->
                <div class="scrollable">
                    <div class="slds-form-element">
                        <div class="slds-form-element__control">
                            <div id="my-hot-table" class="handsontable" />
                        </div>
                    </div>
                </div>
                <!-- / TABLE -->

                <!-- FOOTER -->

                <div >
                    <div class="slds-align_absolute-center"><b>TOTAL OF RECORDS: </b>&nbsp;<output id="totalOfRecords" placeholder="0" style="width: 150px;"/></div>
                    <div class="slds-align_absolute-center"><b>TOTAL AMOUNT:     </b>&nbsp;<output id="totalAmount"    placeholder="0" style="width: 150px;"/></div>
                </div>

                <!-- / FOOTER -->
            </div>
        </div>

    </html>
</apex:page>